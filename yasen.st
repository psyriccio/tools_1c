{1,
{14,
{"Yasen",1,0,"",""},
{0,
{"Об этом файле",0,0,"","Этот файл шаблонов собран мной за те 5 лет, которые я работаю с 8-кой.
Я его использовал не только как заготовки кода, но и как копилку: иногда проще сложить етодически полезный кусок кода в шаблон, чем рыться в избранном/поиске и потом еще кусать локти что автор/модератор потер ветку с исходником.
Здесь далеко не все из того, что мне понравилось. Но людям полезен, поэтому решил выложить на всеобщее обозрение.

Disclaimer: 
1. Авторские права не соблюдены, кто нашел свой код здесь, дайте мне знать на mail@natyasen.ru, исправлюсь
2. Если что-то не работает, воспользуйтесь устройствами /dev/head && /dev/hands"}
},
{3,
{"Стандартные",1,0,"",""},
{11,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Если","Если <?> Тогда
КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?> По Цикл
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для Каждого <?> Из  Цикл
КонецЦикла;"}
},
{0,
{"Процедура",0,0,"Проц[едура]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры	// <?""Имя процедуры"">"}
},
{0,
{"Функция",0,0,"Функ[ция]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">()
	<?>
КонецФункции	// <?""Имя функции"">
"}
},
{0,
{"Возврат",0,0,"","Возврат;<?>"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение
КонецПопытки;"}
},
{0,
{"Директива компиляции",0,0,"Дирек[тива]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Инструкция препроцессора",0,0,"Инстр[укция]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"?",0,0,"?","?( <?>, ,  )"}
}
},
{18,
{"Прикладные",1,0,"",""},
{0,
{"Перечисление",0,1,"Переч[исление]","ПредопределенноеЗначение(""Перечисление.<?""Выберите значение перечисления"", ЗначениеПеречисления>"")"}
},
{2,
{"Функциональные опции",1,0,"",""},
{0,
{"Получить функциональную опцию",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпцию(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
},
{0,
{"Получить функциональную опцию интерфейса",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпциюИнтерфейса(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
}
},
{4,
{"Общие формы",1,0,"",""},
{0,
{"Открыть общую форму",0,0,"Открыть[Форму]","ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Открыть общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить общую форму",0,0,"Получить[Форму]","ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Получить общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
}
},
{5,
{"Планы обмена",1,0,"",""},
{0,
{"Открыть форму плана обмена",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Открыть форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана обмена",0,0,"Получить[Форму]","ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Получить форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = ПланыОбмена.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"","Константы.<?"""", Константа>.Получить()"}
}
},
{6,
{"Справочники",1,0,"",""},
{0,
{"Открыть форму справочника",0,0,"Открыть[Форму]","ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму справочника",0,0,"Получить[Форму]","ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = Справочники.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Обход элементов иерархически",0,0,"","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{6,
{"Документы",1,0,"",""},
{0,
{"Открыть форму документа",0,0,"Открыть[Форму]","ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму документа",0,0,"Получить[Форму]","ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Движения",0,0,"","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{4,
{"Отчеты",1,0,"",""},
{0,
{"Открыть форму отчета",0,0,"Открыть[Форму]","ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму отчета (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму отчета",0,0,"Получить[Форму]","ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму отчета (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{4,
{"Обработки",1,0,"",""},
{0,
{"Открыть форму обработка",0,0,"Открыть[Форму]","ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму обработка (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму обработка",0,0,"Получить[Форму]","ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму обработка (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Открыть форму плана видов характеристик",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов характеристик",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов характеристик",0,0,"","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Открыть форму плана счетов",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана счетов",0,0,"Получить[Форму]","ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Открыть форму плана видов расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов расчета",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов расчета",0,0,"","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Открыть форму бизнес-процесса",0,0,"Открыть[Форму]","ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму бизнес-процесса",0,0,"Получить[Форму]","ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{4,
{"Задачи",1,0,"",""},
{0,
{"Открыть форму задачи",0,0,"Открыть[Форму]","ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму задачи",0,0,"Получить[Форму]","ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{6,
{"Регистры сведений",1,0,"",""},
{0,
{"Открыть форму регистра сведений",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра сведений",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра сведений",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра сведений (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры накопления",1,0,"",""},
{0,
{"Открыть форму регистра накопления",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра накопления",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра накопления",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра накопления (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры бухгалтерии",1,0,"",""},
{0,
{"Открыть форму регистра бухгалтерии",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра бухгалтерии",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра бухгалтерии",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра бухгалтерии (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры расчета",1,0,"",""},
{0,
{"Открыть форму регистра расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра расчета",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра расчета",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра расчета (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
}
},
{10,
{"Прочие",1,0,"",""},
{0,
{"Предупреждение",0,0,"Предупр[еждение]","Предупреждение(<?>);"}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Форматная строка",0,1,"","""<?, ФорматнаяСтрока>"""}
},
{0,
{"Создать структуру",0,0,"Струк[тура]","Новый Структура(""<?>"", )"}
},
{0,
{"Запрос",0,0,"шЗапрос","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	

КонецЦикла;
"}
},
{0,
{"Запрос с параметром",0,0,"шЗапросПар","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр(""<?>"", );

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	

КонецЦикла;
"}
},
{0,
{"Вопрос",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">) = <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут"">"}
},
{0,
{"Проверка типа",0,0,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"КонструкторОписанияТипов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
}
}
},
{0,
{"Выбор типа",0,1,"шбТип","Тип(""<?""Выбор типа"", ВыборТипа)>"")"}
},
{0,
{"НайтиСоздатьДокумент",0,0,"","// Находит или создает новый документ Партия (ручной
//
// Параметры
//  Дата партии
//  ВидПриходногоДокумента="""", НомерПриходногоДокумента="""" - для поиска имеющихся документов в рабочем периоде
// Возвращаемое значение:
//   Ссылка на документ Партия
//
Функция НайтиСоздатьДокументПартии(Дата, ВидПриходногоДокумента="""", НомерПриходногоДокумента="""")
	
	СтруктураСубконтоПартии=Новый Структура();
	СтруктураСубконтоПартии.Вставить(""ВидСубконто"",ВидСубконтоПартии);
	
	Если ВидПриходногоДокумента<>"""" Тогда // Поиск приходных документов в рабочем периоде
		Попытка
			Партия = Документы[СоответствиеВидовДокументов[ВидПриходногоДокумента].ВидДокумента].НайтиПоНомеру(СоответствиеВидовДокументов[ВидПриходногоДокумента].Префикс+(НомерПриходногоДокумента), Дата);
			Если Партия=Неопределено Тогда
				Сообщить(""Не задан номер документа партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
			ИначеЕсли Партия.Пустая() Тогда
				Сообщить(""Не найден документ партии с заданным номером: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Исключение
			Сообщить(""Ошибка при поиске партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
		КонецПопытки;
	Иначе
		//Сообщить(""Не задан вид документа партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	Если ЗначениеНеЗаполнено(Партия) Тогда
		Выборка = Документы.Партия.Выбрать(НачалоДня(Дата),КонецДня(Дата));
		Если Выборка.Следующий() Тогда
			Партия = Выборка.Ссылка;
		Иначе
			Партия = Документы.Партия.СоздатьДокумент();
			Партия.Дата = Дата;
			Партия.УстановитьНовыйНомер();
			Партия.ВалютаДокумента = Руб;
			Партия.Записать();
		КонецЕсли; 
	КонецЕсли;
	СтруктураСубконтоПартии.Вставить(""Значение"",Партия.Ссылка); 
	Возврат СтруктураСубконтоПартии
	
КонецФункции // НайтиСоздатьДокументПартии()
"}
},
{0,
{"НайтиСоздатьСправочник",0,0,"","// Находит или создает группу с заданными параметрами
//
// Параметры
//  Код,Наименование
//	ВидСправочника - строковое описание вида,ЭтоГруппа=Ложь - флажок группы
//
// Возвращаемое значение:
//   Ссылка на элемент или группу
//
Функция НайтиСоздатьСправочник(Код,Наименование,ВидСправочника,ЭтоГруппа=Ложь)
	СпрСсылка = Справочники[ВидСправочника].НайтиПоКоду(Код);
	
	Если СпрСсылка = Неопределено Тогда
	
		Сообщить(""Не задан код для поиска или создания справочника ""+ВидСправочника);
		Возврат Неопределено;
	
	КонецЕсли;
	
	Если СпрСсылка.Пустая() Тогда
	
		СпрОбъект = ?(ЭтоГруппа,Справочники[ВидСправочника].СоздатьГруппу(),Справочники[ВидСправочника].СоздатьЭлемент());
		СпрОбъект.Код = Код;
		СпрОбъект.Наименование = Наименование;
		СпрОбъект.Записать();
		Возврат СпрОбъект.Ссылка;
		
	Иначе
		
		Возврат СпрСсылка;
		
	КонецЕсли;
КонецФункции // НайтиСоздатьСправочник()"}
},
{0,
{"!!! Справка по шаблонам !!!",0,0,"","Произвольный запрос <?""Подсказка"">

где Подсказка - текст поясняющей надписи. Используется для ввода произвольного текста.  При использовании такого шаблона на экран выводится диалог на ввод контекстно-зависимой части шаблона. 

Установка курсора <?> 

Используется для установки курсора в указанное место после вставки текста шаблона. 

Специальный запрос 

Используется для ввода выбора объектов конфигурации, предопределенных элементов и других данных.

<?""Подсказка"", БизнесПроцесс> - выбор бизнес-процесса

<?""Подсказка"", ВыборВарианта, ""Подсказка 1"", , ..., ""Подсказка N"", ""Строка для вставки N"">
         При использовании данного шаблона на экран выводится список строк для выбора. 
         Каждая строка списка состоит из: 
               ""Подсказка 1"" - поясняющий текст 
               ""Строка для вставки 1"" - текст, который будет вставлен при выборе строки. 

<?""Подсказка"", Документ> - выбор вида документа

<?""Подсказка"", Выбор типа> - выбор типа

<?""Подсказка"", ЖурналДокументов> - выбор вида журнала документов

<?""Подсказка"", ЗначениеПеречисления> - выбор значения перечисления

<?""Подсказка"", ИмяПользователя> - выбор имени пользователя

<?""Подсказка"", ПолноеИмяПользователя> - выбор полного имени пользователя

<?""Подсказка"", ИмяПользователяХранилищаКонфигурации> - выбор имени пользователя хранилища конфигурации

<?""Подсказка"", Константа> - выбор константы

<?""Подсказка"", КонструкторОписанияТипов> - конструктор описания типов

<?""Подсказка"", КритерийОтбора> - выбор критерия отбора

<?""Подсказка"", Обработка> - выбор обработки

<?""Подсказка"", Отчет> - выбор отчета

<?""Подсказка"", Перерасчет> - выбор перерасчета

<?""Подсказка"", Перечисление> - выбор перечисления

<?""Подсказка"", ПланВидовРасчета> - выбор плана видов расчета

<?""Подсказка"", ПланВидовХарактеристик> - выбор плана видов характеристик

<?""Подсказка"", ПланОбмена> - выбор плана обмена

<?""Подсказка"", ПланСчетов> - выбор плана счетов

<?""Подсказка"", ПланВидовРасчетаПредопределенныеДанные> - выбор предопределенных данных плана видов расчета. Сначала выбирается план видов расчета, а затем значение предопределенных данных

<?""Подсказка"", ПланВидовХарактеристикПредопределенныеДанные> - выбор предопределенных данных плана видов характеристик. Сначала выбирается план видов характеристик, а затем значение предопределенных данных

<?""Подсказка"", ПланСчетовПредопределенныеДанные> - выбор предопределенных данных плана счетов. Сначала выбирается план счетов, а затем значение предопределенный счет

<?""Подсказка"", ОбъектМетаданных, ""<Наименование объекта метаданных 1>"", ""<Наименование объекта метаданных 2>"", ..., ""<Наименование объекта метаданных N>""> - подмножество объектов конфигурации

<?""Подсказка"", Последовательность> - выбор последовательность

<?""Подсказка"", РегистрБухгалтерии> - выбор регистра бухгалтерии

<?""Подсказка"", РегистрНакопления> - выбор регистра накопления

<?""Подсказка"", РегистрРасчета> - выбор регистра расчета

<?""Подсказка"", РегистрСведений> - выбор регистра сведений

<?""Подсказка"", Справочник> - выбор справочника

<?""Подсказка"", СправочникПредопределенныеДанные> - выбор предопределенных данных справочника. Сначала выбирается справочник, а затем значение предопределенный счет

<?""Подсказка"", ТекстЗапроса> - осуществляется формирование текста запроса с использованием конструктора запросов

<?""Подсказка"", ДатаВремя, ""<Форматная строка>""> - ввод текущей даты в формате, указанном в строке <Форматная строка> 

<?""Подсказка"", ФорматнаяСтрока> - осуществляется формирование текста форматной строки с использованием конструктора форматной строки. 

"}
},
{0,
{"+1 (инкремент)",0,0,"++","<?""Значение""> = <?""Значение""> + 1;"}
},
{4,
{"Стандарты разработки",1,0,"",""},
{0,
{"Открыть коммент",0,0,"//+","/// { Анатолий Ясень. <?"""", ДатаВремя, ""ДЛФ=DT""> (+)"}
},
{0,
{"Коммент",0,0,"коммент","/// { Анатолий Ясень. <?"""", ДатаВремя, ""ДЛФ=DT""> 
/// <?""Введите описание изменений"">
/// Тип изменения: <?""Тип изменения?"", ВыборВарианта, ""Изменение типового функционала"", ""Изменение типового функционала"", ""Добавление возможности"", ""Добавление возможности"", ""Исправлена ошибка"", ""Исправлена ошибка"">
/// Старый код:
/// Новый код:
<?>
/// Анатолий Ясень <?"""", ДатаВремя, ""ДЛФ=DT""> }"}
},
{0,
{"Закрыть коммент",0,0,"//-","/// Анатолий Ясень. <?"""", ДатаВремя, ""ДЛФ=DT""> (-) }"}
},
{3,
{"Разделы",1,0,"",""},
{0,
{"Обработчики",0,0,"","///////////////////////////////////////////////////////
// Обработчики событий формы"}
},
{0,
{"Начало раздела",0,0,"///","///////////////////////////////////////////////////////
// <?""Начало раздела: введите название нового раздела с большой буквы"">"}
},
{0,
{"Служебные процедуры и функции",0,0,"","///////////////////////////////////////////////////////
// Служебные процедуры и функции"}
}
}
},
{3,
{"Управление компиляцией",1,0,"",""},
{0,
{"Если клиент",0,0,"%if","#Если Клиент Тогда
	<?>
#КонецЕсли"}
},
{0,
{"Если сервер",0,0,"%if","#Если Сервер Тогда
	<?>
#КонецЕсли"}
},
{0,
{"ЕслиИначе",0,0,"%if","#Если Клиент Тогда
	<?>
#ИначеЕсли Сервер Тогда
#Иначе
#КонецЕсли"}
}
},
{5,
{"Алгоритмы",1,0,"",""},
{0,
{"Удаление элементов списка",0,0,"","// Обход списка с конца, так как при удалении элементы сдвигаются к началу
КоличествоСтрок = <?""ИмяСписка"">.Количество();
Для сч=1 По КоличествоСтрок  Цикл
	_Строка = <?""ИмяСписка"">[КоличествоСтрок-сч];
	<?""ИмяСписка"">.Удалить(_Строка);
КонецЦикла;
"}
},
{0,
{"Создание построителя запроса по табличному полю",0,0,"","Функция ПолучитьПостроительЗапросаСпискаТабличногоПоля(пТабличноеПоле) 

    МетаданныеЗначения = ЛксПолучитьМетаданные(пТабличноеПоле.Значение);
    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.Текст = ""ВЫБРАТЬ * ИЗ "" + МетаданныеЗначения.ПолноеИмя() + "" КАК Таблица"";
    ПостроительЗапроса.ЗаполнитьНастройки();
    ЛксСкопироватьПорядок(ПостроительЗапроса.Порядок, пТабличноеПоле.Значение.Порядок);
    ЛксСкопироватьОтборДинамическогоСписка(ПостроительЗапроса.Отбор, пТабличноеПоле.Значение.Отбор);
    Если Истина
        И ЛксЛиМетаданныеИерархическогоОбъекта(МетаданныеЗначения)
        И пТабличноеПоле.ИерархическийПросмотр
    Тогда
        ПостроительЗапроса.Отбор.Добавить(""Родитель"");
        Если пТабличноеПоле.ТекущийРодитель <> Неопределено Тогда 
            ПостроительЗапроса.Отбор.Родитель.Установить(пТабличноеПоле.ТекущийРодитель);
        КонецЕсли;
    КонецЕсли;
    Возврат ПостроительЗапроса;

КонецФункции"}
},
{0,
{"Обход документов, выведенных в форме списка",0,0,"","Построитель=Новый ПостроительОтчета;
Построитель.ИсточникДанных=Новый ОписаниеИсточникаДанных(ДокументСписок);
Выборка=Построитель.Результат.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;
"}
},
{0,
{"Транзакция с просмотром результатов и возможностью отката изменений",0,0,"","ВТРанзакции = Истина;
Если ВТранзакции Тогда	НачатьТранзакцию() КонецЕсли;

Если ВТранзакции Тогда
	ФормаСписка = <?""Тип объекта?"", ВыборТипа>.ПолучитьФормуСписка();
	Если ФормаСписка.Открыта() Тогда
		
		ФормаСписка.Закрыть();
		
	КонецЕсли;
	ФормаСписка.ОткрытьМодально();
	Если Вопрос(""Принять изменения?"", РежимДиалогаВопрос.ДаНет, <?""Таймаут вопроса в секундах"">, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	
		ЗафиксироватьТранзакцию();
	
	Иначе
	
		ОтменитьТранзакцию();
	
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"Вывод в табличный документ",0,0,"","//Получаем исходный макет
Макет = ПолучитьМакет(""Основной"");       
//Создаем табличный документ для вывода
ТабДок = Новый ТабличныйДокумент();        
//Получаем шапку
Шапка=Макет.ПолучитьОбласть(""Шапка"");     
//Устанавливаем параметры в области шапки
Шапка.Параметры.НачДата=НачДата;
Шапка.Параметры.КонДата=КонДата;
//Выводим шапку
ТабДок.Вывести(Шапка);
//Выводим все строки таблицы значений ТЗ
Для Каждого Стр Из ТЗ Цикл
    //Выбираем, какую строку выводить
    Если СокрЛП(Стр.Статус)=""Ошибка"" Тогда
        Строка=Макет.ПолучитьОбласть(""Ошибка"");
    Иначе
        Строка=Макет.ПолучитьОбласть(""Строка"");
    КонецЕсли;
    //Автоматически заполняем параметры области строки из строки таблицы значений
    Строка.Параметры.Заполнить(Стр);
    //Выводим строку
    ТабДок.Вывести(Строка);
КонецЦикла;
//Показываем табличный документ
ТабДок.Показать();

"}
}
},
{3,
{"Формы",1,0,"",""},
{0,
{"Получение массива элементов формы via TormozIT",0,0,"","Функция ЛксСтрокаВнутрВХМЛТело(вхСтрока, выхХМЛТело = Неопределено) Экспорт
	
	//{ Получение одной длинной строки
	выхХМЛТело = СтрЗаменить(вхСтрока,СИМВОЛЫ.ПС,"""");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,СИМВОЛЫ.ВК,"""");
	//}
	
	//{ Заменяем символы, критичные для XML
	//	& на &
	//	< на <
	//	> на >
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""&"",""&"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""<"",""<"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"">"","">"");
	//}
	
	//{ Замена одинарных символов
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"","",""</data><data>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""{"",""<elem><data>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""}"",""</data></elem>"");
	//}
	
	//{ Удаляем лишние блоки <data><elem> и </data></elem>
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""<data><elem>"",""<elem>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</elem></data>"",""</elem>"");
	//}
	
	//{ Добавляем перенос строки к </data> и к </elem> для удобства поиска различий
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</elem>"",""</elem>""+СИМВОЛЫ.ПС);
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</data>"",""</data>""+СИМВОЛЫ.ПС);
	//}
	
	Возврат выхХМЛТело;
	
КонецФункции

Функция ЛксПолучитьМассивИменРеквизитовФормы(Форма) Экспорт

	СтрокаФормы = ЗначениеВСтрокуВнутр(Форма);
	XMLСтрокаФормы = ЛксСтрокаВнутрВХМЛТело(СтрокаФормы);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента = ""/elem/elem/elem[2]/elem[2]/elem/data[3]"";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента + ""/text()"", ДокументDOM,
		РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	Массив = Новый Массив;
	Пока 1 = 1 Цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Текст = Узел.ТекстовоеСодержимое;
		Длина = СтрДлина(Текст);
		Текст = Сред(Текст, 2, Длина - 2);
		Массив.Добавить(Текст);
	КонецЦикла;
	Возврат Массив;

КонецФункции // ЛксПолучитьМассивИменРеквизитовФормы()
"}
},
{3,
{"Работа с диалогами",1,0,"",""},
{0,
{"Обработка быстрого выбора для поля ввода вместо поля выбора (""..."" вместо ""треугольничка"")",0,0,"","ВыбранноеЗначение = ЭтаФорма.ВыбратьИзМеню(Элемент.СписокВыбора, Элемент);
Если ВыбранноеЗначение = Неопределено Тогда
	Возврат
Иначе
	Элемент.Значение = ВыбранноеЗначение;
КонецЕсли;"}
},
{0,
{"Установка отбора для формы выбора в соответствии со ВСЕМИ реквизитами шапки документа",0,0,"","Для каждого РеквизитШапки Из Объект.Метаданные().Реквизиты Цикл
	ЭлементОтбора = Отбор.Найти(РеквизитШапки.Имя);
	ЗначениеРеквизита = Вычислить(""Объект.""+РеквизитШапки.Имя);
	Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЭлементОтбора<>Неопределено Тогда
		ЭлементОтбора.Установить(ЗначениеРеквизита);
	КонецЕсли;
КонецЦикла;
"}
},
{0,
{"Безопасная обработка - проверка текущей строки табличного поля",0,0,"","	Если СтрокаДерева = Неопределено Тогда
	
		СтрокаДерева = ЭлементыФормы.<?""Имя табличного поля"">.ТекущиеДанные;
		
		Если СтрокаДерева = Неопределено Тогда
		
			Возврат Неопределено
		
		КонецЕсли;
	
	КонецЕсли;"}
}
},
{3,
{"Генерация форм",1,0,"",""},
{0,
{"Размещение элемента на форме с привязкой к существующим элементам",0,0,"","Процедура РазместитьРеквизитНаФорме(Форма, ИмяЭлемента, ТипЭлемента, ПривязкаКЭлементуФормы, ИмяРеквизита, ПоложениеОтносительноПривязки = ""снизу"", ИмяОбработчика = """") Экспорт
	Элемент = Форма.ЭлементыФормы.Добавить(ТипЭлемента, ИмяЭлемента, Истина);
	
	Если ТипЭлемента = Тип(""Надпись"") Тогда
		Элемент.Заголовок = Метаданные().Реквизиты[ИмяРеквизита].Синоним;
	ИначеЕсли ТипЭлемента = Тип(""ПолеВвода"") Тогда
		Элемент.Данные = ИмяРеквизита;
	КонецЕсли;
	
	Если ПоложениеОтносительноПривязки = ""снизу"" Тогда
		Элемент.Верх = ПривязкаКЭлементуФормы.Верх + 20;
		Элемент.Лево = ПривязкаКЭлементуФормы.Лево;
	ИначеЕсли ПоложениеОтносительноПривязки = ""справа"" Тогда
		Элемент.Верх = ПривязкаКЭлементуФормы.Верх;
		Элемент.Лево = ПривязкаКЭлементуФормы.Лево + 100;
	КонецЕсли;
	Элемент.Ширина = ПривязкаКЭлементуФормы.Ширина;
	Элемент.Высота = ПривязкаКЭлементуФормы.Высота;
    Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Лево,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Лево);
	Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Верх,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Низ);
	Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Право,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Право);

	Если НЕ ИмяОбработчика = """" Тогда
		Форма.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, ИмяОбработчика);
	КонецЕсли;	
КонецПроцедуры
"}
},
{0,
{"Размещение колонки в ТЧ",0,0,"","Процедура ДобавитьКолонкуТЧ(Форма, ИмяТЧ, ИмяРеквизитаТЧ, ИмяОбработчика = """")  Экспорт
    МДРеквизита = Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизитаТЧ];
	НоваяКолонка = Форма.ЭлементыФормы[ИмяТЧ].Колонки.Добавить(ИмяРеквизитаТЧ, МДРеквизита.Синоним);
	Если МДРеквизита.Тип = Новый ОписаниеТипов(""Булево"") Тогда
		НоваяКолонка.ДанныеФлажка = ИмяРеквизитаТЧ;
	Иначе
		НоваяКолонка.Данные = ИмяРеквизитаТЧ;
	КонецЕсли;
	НоваяКолонка.ПодсказкаВШапке = МДРеквизита.Комментарий;
	
	Если НЕ ИмяОбработчика = """" Тогда
		Форма.ПодключитьОбработчикИзмененияДанных(ИмяТЧ, ИмяОбработчика);
	КонецЕсли;
КонецПроцедуры

"}
},
{0,
{"Сохранение и восстановление настроек колонок при генерации дерева/таблицы методом ""СоздатьКолонки""",0,0,"","
	ДФ = ЭлементыФормы.ДеревоПереченьИмущества;
	Колонки = ДФ.Колонки;
	Для каждого К Из Колонки Цикл
	
		СоответствиеКолонок.Вставить(К.Имя, Новый Структура(""АвтоВысотаЯчейки,Видимость,ВысотаЯчейки,ГоризонтальноеПоложениеВКолонке,Положение,Ширина,ДействиеПриИзменении,Индекс"", К.АвтоВысотаЯчейки, К.Видимость, К.ВысотаЯчейки, К.ГоризонтальноеПоложениеВКолонке, К.Положение, К.Ширина, К.ЭлементУправления.ПолучитьДействие(""ПриИзменении""), Колонки.Индекс(К)));
	
	КонецЦикла;
		
	ДФ.СоздатьКолонки();
	
 	Для каждого К Из Колонки Цикл
		
		СтруктураНастроекКолонки = СоответствиеКолонок.Получить(К.Имя);
		ЗаполнитьЗначенияСвойств(К, СтруктураНастроекКолонки);
		К.ЭлементУправления.УстановитьДействие(""ПриИзменении"", СтруктураНастроекКолонки.ДействиеПриИзменении);
	
	КонецЦикла;
	
	Для каждого К Из СоответствиеКолонок Цикл
		КолонкаНаФорме = Колонки.Найти(К.Ключ);
		Если К.Значение.Индекс <> Колонки.Индекс(КолонкаНаФорме) Тогда
		
			Колонки.Сдвинуть(КолонкаНаФорме, К.Значение.Индекс - Колонки.Индекс(КолонкаНаФорме));
		
		КонецЕсли;
	
	КонецЦикла;

"}
}
}
},
{14,
{"Узелки на память",1,0,"",""},
{0,
{"Активизация окна для того, чтобы показать pupup",0,0,"","Перем ProcessID,WSHShell,Shell;
//*******************************************
 
Процедура Сформировать()
    Shell.UndoMinimizeAll();
    ВвестиСтроку("""","""",1,0,1);
    WSHShell.appactivate(ProcessID);
КонецПроцедуры

Процедура ПриОткрытии()
    Форма.ОбработкаОжидания(""Сформировать"",5);
КонецПроцедуры    // ПриОткрытии
 
Shell=СоздатьОбъект(""Shell.Application"");
WSHShell = СоздатьОбъект(""WScript.Shell"");
l = СоздатьОбъект(""WBemScripting.SWbemLocator"");
s = l.connectserver();
oExec = WSHShell.Exec(""rundll32 kernel32,SleepEx"");
ProcessID=s.get(""Win32_process.Handle=""+oExec.ProcessID).ParentProcessID;
oExec.Terminate();
"}
},
{0,
{"Разбор списка ИБ",0,0,"","НазваниеБазы = """";
Попытка
			   
   //Определям текущего пользователя Windows
   Network = Новый ComОбъект(""WScript.Network"");
   ИмяПользователяWindows = Network.UserName;
			   
   //Имя каталога, где лежит файл с информацией о последних базах
   ИмяКаталога = ""C:\Documents and Settings\"" + ИмяПользователяWindows + ""\Application Data"";
   ИмяКаталога1С = ИмяКаталога + ""\1C\1Cv8\"";
			   
   //Имя Файла
   ИмяФайла = ИмяКаталога1С + ""v8ib.lst"";
			   
   //Читаем файл
   Текст = Новый ТекстовыйДокумент();
   Текст.Прочитать(ИмяФайла);
			   
   ЧтоИщем = ""Connect="" + СтрокаСоединенияИнформационнойБазы();
			   
   Для й = 1 По Текст.КоличествоСтрок() Цикл
				   
	   Строка = Текст.ПолучитьСтроку(й);
	   Если Строка = ЧтоИщем Тогда
		   НазваниеБазы = Сред(НазваниеБазы, 2, СтрДлина(НазваниеБазы) - 2);
		   Прервать;
	   КонецЕсли;
	   НазваниеБазы = Строка;
   КонецЦикла;
Исключение
			   
КонецПопытки;"}
},
{0,
{"Авторегистрация внешней обработки",0,0,"","// Процедура позволяет автоматически зарегистрировать обработку из формы отладки
Процедура ЗарегистрироватьНажатие(Элемент)
	МД = Метаданные();
	ИмяОбработки = МД.Имя;
	Представление = ЭтотОбъект.Метаданные().Представление();
	
	ЭлементСправочникаОбработок = Справочники.ВнешниеОбработки.НайтиПоНаименованию(Представление);
	Если ЭлементСправочникаОбработок.Пустая() Тогда
		ОбъектСправочникаОбработок = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	Иначе
		ОбъектСправочникаОбработок = ЭлементСправочникаОбработок.ПолучитьОбъект();
	КонецЕсли;
	ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.<?""Вид обработки?""><?>;
	ОбъектСправочникаОбработок.ВидОбработки = ВидОбработки;           
	ОбъектСправочникаОбработок.Комментарий = МД.Комментарий;
	ОбъектСправочникаОбработок.Наименование = Представление;
	
	ФС = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ИмяФайлаВнешнейОбработки = ФС.Каталог+ИмяОбработки+"".epf"";
	Файл = Новый Файл(ИмяФайлаВнешнейОбработки);
	Если НЕ Файл.Существует() Тогда
		Сообщить(""Не найден файл обработки"");
		Возврат;	
	КонецЕсли;
	ОбъектСправочникаОбработок.КомментарийКФайлуИсточнику = ""Исходный файл: "" + Файл.Имя + Символы.ПС + ""размер:"" + Файл.Размер()+"" байт; изменен:"" + Файл.ПолучитьВремяИзменения() + ""; сохранен в ИБ:"" + ТекущаяДата();;
	ОбъектСправочникаОбработок.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаВнешнейОбработки));
	
	Если МД.Макеты.Найти(""Параметры_Авторегистрации"")<>Неопределено Тогда
		Макет = ПолучитьМакет(""Параметры_Авторегистрации"");
		ТаблицаПринадлежности = Новый ТаблицаЗначений;
		ТаблицаПринадлежности.Колонки.Добавить(""СсылкаОбъекта"");
		ТаблицаПринадлежности.Колонки.Добавить(""ТабличнаяЧастьИмя"");
		Для индекс = 1 по Макет.ВысотаТаблицы Цикл
			Попытка
				ВидОбъектаСтр = Макет.Область(индекс, 1, индекс, 1).Текст;
				ИмяТЧ         = ?(ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей,Макет.Область(индекс, 2, индекс, 2).Текст,"""");
				ЕСли Лев(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ""."")-1) = ""Документы"" Тогда
					Попытка
						СсылкаНаОбъект = Документы[Сред(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ""."")+1)].ПустаяСсылка();
						СтрокаТаблицыПринадлежности = ТаблицаПринадлежности.Добавить();
						СтрокаТаблицыПринадлежности.СсылкаОбъекта     = СсылкаНаОбъект;
						СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя = ИмяТЧ;
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ""."")-1)  = ""Справочники"" Тогда
					Попытка
						СсылкаНаОбъект = Справочники[Сред(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ""."")+1)].ПустаяСсылка();
						СтрокаТаблицыПринадлежности = ТаблицаПринадлежности.Добавить();
						СтрокаТаблицыПринадлежности.СсылкаОбъекта     = СсылкаНаОбъект;
						СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя = ИмяТЧ;
					Исключение
					КонецПопытки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Принадлежность = ОбъектСправочникаОбработок.Принадлежность;
		Если ТаблицаПринадлежности.Количество() > 0 Тогда
			Ответ = Вопрос(""Указанная внешняя печатная форма содержит параметры авторегистрации. Использовать их при регистрации?"", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для Каждого СтрокаТаблицыПринадлежности Из ТаблицаПринадлежности Цикл
					Если Принадлежность.НайтиСтроки(Новый Структура(""СсылкаОбъекта,ТабличнаяЧастьИмя"", СтрокаТаблицыПринадлежности.СсылкаОбъекта, СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя)).Количество() = 0 Тогда
						НоваяСтрока = Принадлежность.Добавить();
						НоваяСтрока.СсылкаОбъекта = СтрокаТаблицыПринадлежности.СсылкаОбъекта;
						МетаданныеОбъекта = СтрокаТаблицыПринадлежности.СсылкаОбъекта.Метаданные();
						Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
							НоваяСтрока.ПредставлениеОбъекта = ""Документ """""" + ?(МетаданныеОбъекта.Синоним = """", МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним) + """""""";
						ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
							НоваяСтрока.ПредставлениеОбъекта = ""Справочник """""" + ?(МетаданныеОбъекта.Синоним = """", МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним) + """""""";
						КонецЕсли;
						НоваяСтрока.ТабличнаяЧастьИмя = СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя;
						НайденнаяТЧ = МетаданныеОбъекта.ТабличныеЧасти.Найти(СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя);
						Если НайденнаяТЧ = Неопределено Тогда
							НоваяСтрока.ТабличнаяЧастьПредставление = НоваяСтрока.ТабличнаяЧастьИмя;
						Иначе
							НоваяСтрока.ТабличнаяЧастьПредставление = НайденнаяТЧ.Синоним;
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕСли;
	
	ФормаОбъекта = ОбъектСправочникаОбработок.ПолучитьФорму();
	Если ФормаОбъекта.Открыта() Тогда
		ФормаОбъекта.Закрыть();
	КонецЕсли;
	НачатьТранзакцию();
	ФормаОбъекта.Заголовок = ""Проверьте правильность заполнения:"";
	ФормаОбъекта.ОткрытьМодально();
	Если Вопрос(""Принять изменения"", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Если ОбъектСправочникаОбработок.Модифицированность() Тогда
			ОбъектСправочникаОбработок.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Установка субконто при подписке на событие ПриЗаписи РБ",0,0,"","Процедура КорректировкаНабораЗаписейХозрасчетный(Источник, Отказ, РежимЗаписи) Экспорт
	ЗаписатьПовторно = Ложь;
	Если Источник.Количество()>0 И Источник.ОбменДанными.Загрузка = Ложь Тогда
		Для каждого Запись Из Источник Цикл
			Если ЗначениеЗаполнено(Запись.Регистратор) Тогда
				Регистратор = Запись.Регистратор;
				МД = Регистратор.Метаданные();
				Если НЕ  МД.Реквизиты.Найти(""ПодразделениеОрганизации"") = Неопределено Тогда
					Если Запись.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновныеСредства)=Истина И (НЕ Запись.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения,""ВидСубконто"") = Неопределено) Тогда
						Запись.СубконтоДт.Подразделения = Регистратор.ПодразделениеОрганизации;
					    ЗаписатьПовторно = Истина;
					ИначеЕсли Запись.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновныеСредства)=Истина И (НЕ Запись.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения,""ВидСубконто"") = Неопределено) Тогда
						Запись.СубконтоКт.Подразделения = Регистратор.ПодразделениеОрганизации;
						ЗаписатьПовторно = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗаписатьПовторно Тогда
	
		Источник.ОбменДанными.Загрузка = Истина;
		Источник.Записать();
	
	КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Правильная индикация прогресс-бара (с минимальными обращениями к графической подсистеме)",0,0,"","КоличествоЭлементов<?""Элемент коллекции""> = <?""Индексированная коллекция"">.Количество();
Для Каждого <?""Элемент коллекции""> Из <?""Индексированная коллекция""> Цикл
	ОбработкаПрерыванияПользователя();
	НоваяДоля = <?""Индексированная коллекция"">.Индекс(<?""Элемент коллекции"">) / КоличествоЭлементов<?""Элемент коллекции""> * 100;
	Если Цел(НоваяДоля) <> Цел(НоваяДоля - 100 / КоличествоЭлементов<?""Элемент коллекции"">) Тогда
		Состояние(""Выполнено "" + Формат(НоваяДоля, ""ЧЦ=3; ЧДЦ=0"") + ""%"");
	КонецЕсли;
	<?>
КонецЦикла;"}
},
{0,
{"строка<->массив",0,0,"","Функция СтрокаМассив(Знач Значение,Разделитель)
	Если ТипЗнч(Значение)=Тип(""Строка"") Тогда
		МнСтр=СтрЗаменить(Значение,Разделитель,Символы.ПС);
		Массив=Новый Массив;
		Для н=1 По СтрЧислоСтрок(МнСтр) Цикл
			Массив.Добавить(СтрПолучитьСтроку(МнСтр,н));
		КонецЦикла;
		Возврат Массив;
	ИначеЕсли ТипЗнч(Значение)=Тип(""Массив"") Тогда
		Строка="""";
		Для Каждого Элемент Из Значение Цикл
			Строка=Строка+?(Строка<>"""",Разделитель,"""")+Элемент;
		КонецЦикла;
		Возврат Строка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции
"}
},
{0,
{"Открытие типового бухгалтерского отчета",0,0,""," 	ВыбраннаяРасшифровка = Новый Соответствие();
	ВыбраннаяРасшифровка.Вставить(""ЗаполнитьПоУмолчанию"", Истина);
	ВыбраннаяРасшифровка.Вставить(""Организация"", Организация);
	ВыбраннаяРасшифровка.Вставить(""ДатаКон"", КонецДня(Дата));
	ВыбраннаяРасшифровка.Вставить(""ПоказыватьЗаголовок"", );
	ВыбраннаяРасшифровка.Вставить(""ДатаНач"", НачалоДня(Дата));
	ВыбраннаяРасшифровка.Вставить(""ИмяОбъекта"", ""ОборотноСальдоваяВедомостьПоСчетуХозрасчетный"");
	ВыбраннаяРасшифровка.Вставить(""Счет"", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	
	Отчет = Отчеты[ВыбраннаяРасшифровка[""ИмяОбъекта""]].Создать();
	
	Отчет.Настроить(ВыбраннаяРасшифровка);
	// дополнительная расшифровка
	
	ОтборПоДоговорам = Отчет.ПостроительОтчета.Отбор[""Субконто2""]; 
	ОтборПоДоговорам.ВидСравнения = ВидСравнения.ВСписке;
	ОтборПоДоговорам.Значение = СписокДоговоров;
	ОтборПоДоговорам.Использование = Истина;
	

	
	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	
	ФормаОтчета.ПоказыватьЗаголовок = Истина;
	
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
"}
},
{0,
{"Открытие универсального отчета",0,0,"","	Отчет = Отчеты.ВедомостьПоПартиям.Создать();
	Отчет.УстановитьНачальныеНастройки();
	Отчет.УниверсальныйОтчет.ДобавитьДополнительноеПоле(""БазоваяЕдиницаИзмерения"");
	Отчет.УниверсальныйОтчет.ДобавитьОтбор(""Номенклатура"", Истина,ВидСравнения.ВИерархии,,,,Ложь); // Значение = Неопределено, ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина);
	
	Ф = Отчет.ПолучитьФорму();
    Отчет.СформироватьОтчет(Ф.ЭлементыФормы.ПолеТабличногоДокументаРезультат);
	Ф.Открыть()
"}
},
{0,
{"ПОлучениеЗначенийРеквизитаОпределенногоТипаИзОбъекта",0,0,"","	СписокДоговоров = Новый СписокЗначений;
	МД = СсылкаНаОбъект.Метаданные();
	ТипДоговор = Тип(""СправочникСсылка.ДоговорыКонтрагентов"");
	// Шапка
	Для каждого Реквизит Из МД.Реквизиты Цикл
	
		Если Реквизит.Тип.СодержитТип(ТипДоговор) Тогда
			Договор = СсылкаНаОбъект[Реквизит.Имя];
			Если НЕ ЗначениеНеЗаполнено(Договор) И ТипЗнч(Договор)=ТипДоговор Тогда
			
				СписокДоговоров.Добавить(Договор)
			
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// ТабличныеЧасти
	Для каждого ТЧ Из МД.ТабличныеЧасти Цикл
		Для каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипДоговор) Тогда
				
				МассивДоговоров = СсылкаНаОбъект[ТЧ.Имя].ВыгрузитьКолонку(Реквизит.Имя);
				Для каждого Договор Из МассивДоговоров Цикл
					Если НЕ ЗначениеНеЗаполнено(Договор) И ТипЗнч(Договор)=ТипДоговор Тогда
						СписокДоговоров.Добавить(Договор)
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
"}
},
{0,
{"Определение наличия роли у пользователя",0,0,"","Функция ЕстьРоль(Пользователь, ИмяРоли)
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Пользователь.Код));
	Если НЕ ПользовательИБ = Неопределено Тогда
		РольМД = Метаданные.Роли.Найти(ИмяРоли);
		Если НЕ РольМД = Неопределено Тогда
			Возврат ПользовательИБ.Роли.Содержит(РольМД);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции"}
},
{0,
{"",0,0,"","//Нумерация строк в табличное поле с типом таблица значений одной строкой кода
//На форме размещено табличное поле с типом таблица значений.
//Требуется: автоматически подставлять номер строки
//Решение:
//Создать колонку «НомерСтроки», колонка только на просмотр.
//Создать событие у элемента формы «ПриИзмененииДанных»
//Более того, при вызове из контекстного меню «вывести список» колонка номер строки будет заполнена.

Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(Элемент.Значение.Индекс(ОформлениеСтроки.ДанныеСтроки) + 1);
КонецЦикла;



"}
},
{3,
{"OLE COM",1,0,"",""},
{0,
{"Получение значений из Excel",0,0,"","// функция получает данные ячейки и возвращаеть структуру соответствий, или неопределено в случае неудачи
 
//
 
// В любом случае возвращаем соостветствие ""Значение"" и ""ЭтоФормула"", остальное по флагам
 
//
 
Функция EXCEL_ПолучитьЗначениеЯчейки (ExcelЛист, НомерСтроки, НомерКолонки, ПолучатьТекстФормулы = ложь, ПолучатьОформление = ложь) 
    Результат = Новый Соответствие();
    
    Попытка
        ТекущееЗначениеФормулы = ExcelЛист.Cells(НомерСтроки, НомерКолонки).Formula;
        Если ТекущееЗначениеФормулы <> """" Тогда
            Если Лев(ТекущееЗначениеФормулы, 1) <> ""="" Тогда 
                Результат.Вставить(""ЭтоФормула"", Ложь);
                Результат.Вставить(""ЗначениеЯчейки"", ExcelЛист.Cells(НомерСтроки, НомерКолонки).value);
            Иначе
                Результат.Вставить(""ЭтоФормула"", Истина);
                Если Лев(СокрЛП(ExcelЛист.Cells(НомерСтроки, НомерКолонки).text),1) = ""#"" Тогда 
 
                    Результат.Вставить(""ЗначениеЯчейки"", Неопределено);
                Иначе
                    Результат.Вставить(""ЗначениеЯчейки"", ExcelЛист.Cells(НомерСтроки, НомерКолонки).value);
                КонецЕсли;

                Если ПолучатьТекстФормулы Тогда  
                    Результат.Вставить(""ТекстФормулы"", СокрЛП(ТекущееЗначениеФормулы));
                КонецЕсли;
            КонецЕсли; 
        Иначе
            Результат.Вставить(""ЭтоФормула"", Ложь);
            Результат.Вставить(""ЗначениеЯчейки"", ExcelЛист.Cells(НомерСтроки, НомерКолонки).value);
        КонецЕсли;    
        
        Если ПолучатьОформление Тогда
            Результат.Вставить(""ЦветЯчейки"", СокрЛП(ExcelЛист.Cells(НомерСтроки, НомерКолонки).Interior.ColorIndex));
            // здесь можно добавить и другие....
 
        КонецЕсли;
        
    Исключение
        Результат = Неопределено;
    КонецПопытки;
    
    Возврат Результат;
КонецФункции
"}
},
{0,
{"Выгрузить в Excel",0,0,"","Процедура ВыгрузитьВЁксель()
    
    // Зайти в Excel
 
    Попытка
        Excel = Новый COMОбъект(""Excel.Application"");
        Excel.DisplayAlerts = 0;
        Excel.ScreenUpdating = 0;
        Excel.EnableEvents = 0;    
        Excel.Visible = 0;
        РабочаяКнига = Excel.WorkBooks.Open(ФайлШаблона, 0);
        Лист = Excel.Sheets(1);
    Исключение
        Сообщить(""Не удалось загрузить объект """"Ёксель""""!"");
        Возврат;
    КонецПопытки;
    
    ШапкаОтчета = Лист.Range(""Шапка"");
    ШапкаОтчета.Find(""<ДатаОтчета>"").Value = Формат(ТекущаяДата(), ""ДФ=dd.MM.yyyy"");
    
    СтрокаОтчета = Лист.Range(""Строка"");
    
    Для Счетчик = 1 По 10 Цикл
        
        СтрокаОтчета.EntireRow.Copy();
        СтрокаОтчета.EntireRow.Insert();
        
        ТекСтрока = СтрокаОтчета.Range(""A""+(СтрокаОтчета.Row-1));
        
        ТекСтрока.Find(""<НомерСтроки>"")    .Value = Счетчик;
        ТекСтрока.Find(""<Товар>"")        .Value = ""Номенклатура""+Счетчик;
        ТекСтрока.Find(""<Количество>"")    .Value = 3;
        ТекСтрока.Find(""<Цена>"")        .Value = Счетчик;
        ТекСтрока.Find(""<Сумма>"")        .Value = Счетчик*3;
        
    КонецЦикла;
    
    // удалить последнюю строку
 
    СтрокаОтчета.EntireRow.Delete();
    
    РабочаяКнига.SaveAs(""D:\Темп\МойФайл.xls"");
    
    // Выйти из Excel.
 
    Excel.Quit();
    
КонецПроцедуры
"}
},
{0,
{"GUID",0,0,"","Функция ПроверитьСсылку(Знач Ссылка, Знач Гуид)
    Перем Результат;
    Результат = Истина;
    
        //Получаем из ГУИДа ссылку в том формате, который использует сама 1С
 
    ТекстГуид = """" + ГУИД;
    СсылкаИзГУИД = """";
    ПозицияТире = Найти(ТекстГуид, ""-"");
    к = 0;
    Пока ПозицияТире > 0 И к <= 2 Цикл
        СсылкаИзГУИД = Лев(ТекстГуид, ПозицияТире-1) + СсылкаИзГУИД;
        ТекстГуид = Сред(ТекстГуид, ПозицияТире+1);
        ПозицияТире = Найти(ТекстГуид, ""-"");
        к = к + 1;
    КонецЦикла;
    СсылкаИзГУИД = СтрЗаменить(ТекстГуид, ""-"", """") + СсылкаИзГУИД;
    
    //Проверяем, есть в полученной ссылке системные строки
 
        Если Найти("""" + Ссылка, ""Объект не найден"") > 0 И Найти("""" + Ссылка, СсылкаИзГУИД) > 0 Тогда 
        Результат = Ложь;
    КонецЕсли;
    
    Возврат Результат;
КонецФункции
"}
}
},
{1,
{"Автообмен",1,0,"",""},
{0,
{"Статья про автообмен",0,0,"","//1С 8.0. УРБД: автоматический прием сообщения обмена, содержащего изменения в конфигурации.
//Как известно, при получении из главного узла РИБ сообщения обмена, в котором содержатся не только данные, но и изменения конфигурации, происходит исключение. Что бы реализовать автоматическое получение такого сообщения, необходимо учесть следующие моменты: 
//При чтении сообщения, определить, что получены изменения конфигурации. 
//Выполнить обновление конфигурации базы данных. 
//""Дочитать"" сообщение обмена. 
//Программное чтение сообщения обмена происходит следующим образом:   
  ЧтениеXML=Новый ЧтениеXML;
 ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщения);
 ЧтениеСообщения=ПланыОбмена.СоздатьЧтениеСообщения();
 ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
 ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения);
 ЧтениеСообщения.ЗакончитьЧтение();
 ЧтениеXML.Закрыть();   
 
 //В последних релизах платформы был реализован метод глобального контекста КонфигурацияИзменена(), который позволяет определить факт отличия основной конфигурации, от конфигурации базы данных. Но мы пойдем более очевидным путем, а именно, проанализируем сообщение об ошибке.   
  Попытка
   // чтение сообщения обмена
 Исключение
   СтрОписания=""Обновление может быть выполнено в режиме Конфигуратор."";
   Если Прав(ОписаниеОшибки(),СтрДлина(СтрОписания))=СтрОписания Тогда
      // здесь будет процедура, запускающая обновление конфигурации
   Иначе
      Сообщить(ОписаниеОшибки());
   КонецЕсли;
 КонецПопытки;
  
 //Что бы выполнить обновление конфигурации информационной базы, необходимо завершить работу системы и запустить конфигуратор с параметром /UpdateDBCfg. Это можно сделать создав и запустив из 1С:Предприятия внешний скрипт. Подразумевается, что обмен происходит, когда в базе нет других пользователей, например ночью, или при получении изменений в конфигурации, предварительно автоматически пользователи отключаются от базы. После обновления конфигурации базы данных, снова запускается режим ""Предприятия"", для того, чтобы ""дочитать"" сообщение обмена. Автоматический обмен при старте системы, реализуется следующим образом:   
  Процедура ПриНачалеРаботыСистемы()
  Если РольДоступна(""Автообмен"") Тогда
    // обработка содержащая ""ядро"" автообмена
    ОбменПоПочте=Обработки.ОбменПоПочте.Создать();
    ОбменПоПочте.ВыполнитьАвтообмен();
    ЗавершитьРаботуСистемы(Ложь);
  КонецЕсли;
 КонецПроцедуры
  
 //То есть, при входе в систему пользователя с ролью ""Автообмен"", инициализируется процедура автоматического обмена, после завершения которой 1С:Предприятие закрывается. А в процедуре автоматического обмена, в свою очередь, происходит сначала прием сообщений, затем отправка. Таким образом, осталось рассмотреть только процедуру обновления конфигурации.   
  Процедура ОбновитьКонфигурацию()
   СтрокаСоединения=СтрокаСоединенияИнформационнойБазы();
   ПутьКСкрипту=КаталогВременныхФайлов()+""exchange.vbs"";
   Скрипт=Новый ЗаписьТекста(ПутьКСкрипту,КодировкаТекста.ANSI);
   Скрипт.ЗаписатьСтроку(""WScript.Sleep 5000""); // на всякий случай
   Скрипт.ЗаписатьСтроку(""Set WshShell=CreateObject(""""WScript.Shell"""")"");
   Команда=""""""""""""+КаталогПрограммы()+""1CV8.EXE"""""""" CONFIG""+?(НСтр(СтрокаСоединения,""File"")<>"""","" /F ""+НСтр(СтрокаСоединения,""File""),"" /S ""+НСтр(СтрокаСоединения,""Srvr"")+""\""+НСтр(СтрокаСоединения,""Ref""))+"" /N Exchange /P Exchange /UpdateDBCfg"";
   Скрипт.ЗаписатьСтроку(""ReturnCode=WshShell.Run(""""""+Команда+"""""",1,1)"");
   Скрипт.ЗаписатьСтроку(""If ReturnCode=0 Then""); // если обновились удачно, то пытаемся дочитать сообщение
   Команда=""""""""""""+КаталогПрограммы()+""1CV8.EXE"""""""" ENTERPRISE""+?(НСтр(СтрокаСоединения,""File"")<>"""","" /F ""+НСтр(СтрокаСоединения,""File""),"" /S ""+НСтр(СтрокаСоединения,""Srvr"")+""\""+НСтр(СтрокаСоединения,""Ref""))+"" /N Exchange /P Exchange"";
   Скрипт.ЗаписатьСтроку(""WshShell.Run """"""+Команда+"""""",1,0"");
   Скрипт.ЗаписатьСтроку(""End If"");
   Скрипт.ЗаписатьСтроку(""Set FSO=CreateObject(""""Scripting.FileSystemObject"""")"");
   Скрипт.ЗаписатьСтроку(""Set File=FSO.GetFile(WScript.ScriptFullName)"");
   Скрипт.ЗаписатьСтроку(""File.Delete"");
   Скрипт.Закрыть();
   ЗапуститьПриложение(ПутьКСкрипту);
   ЗавершитьРаботуСистемы(Ложь);
 КонецПроцедуры
  
 //Сформированный в результате скрипт, запускает обновление конфигурации базы данных, затем базу в режиме ""Предприятия"" и после этого сам себя удаляет. 
 
"}
}
},
{1,
{"НЕ Код",1,0,"",""},
{0,
{"Библиотека функций для поиска/заполения объектов",0,0,"","Библиотека функций для поиска/заполения объектов  Автор статьи: Гений 1С
Последняя редакция №1 от 26.02.06
URL: http://kb.mista.ru/article.php?id=106  

Ключевые слова: заполнение


Обычно у тех, кто переходит работать с 77 на 80 возникают проблемы с поиском элементов справочников и документов - для этого нужно писать запросы. 
Для тех, кто не любит писать запросы в 1С 80, предлагаю использовать функции для поиска и заполнения объектов: 

ОбъектНайтиПоРеквизитам(Тип, Вид, Стр, Много=ложь); 
Ищет объект по реквизитам, указанным в структуре Стр. 
Если Много=истина, возвращается массив найденных элементов, иначе только первый найденный элемент. Поиск осуществляется с помощью запроса. 

ОбъектСоздатьПоРеквизитам(Тип, Вид, Стр, СтрЗаписи, Много); 
Ищет один объект(ы) по реквизитам, указанным в структуре Стр и заполняет его реквизиты согласно структуре СтрЗаписи. 
Удобна в тех случаях, когда если объект существует нам нужно изменить его, а если не существует - создать. 

ОбъектЗаполнитьПоРеквизитам(Объект, СтрЗаписи); 
Просто заполняет Объект согласно структуре СтрЗаписи. 

Стр(_Стр, К1=Неопределено, Зн1=Неопределено ..., К10=Неопределено, Зн10=Неопределено); 
Если параметр _Стр - структура значений, то делается ее копия и в нее добавляются значения Зн(I) с ключами К(I). 
Если же первый параметр не структура, то просто создается и возвращается структура согласно переданным значениям и ключам. 
Это как бы более компактный альтернативный конструктор конструктору 1С 80 Новый Структура. 

Примеры: 

Объект.НайтиПоРеквизитам(""Справочники"", ""Номенклатура"", Стр(""Наименование"", ""Пиво""), истина);
- ищет пиво 

Объект.НайтиПоРеквизитам(""Задачи"", ""ЗадачаГлавная"", Стр(""БизнесПроцесс"", БиснесПроцесс), истина);
- ищет все задачи по данному бизнес-процессу 


Объект.СоздатьПоРеквизитам(""Справочник"", ""Номенклатура"", Стр(""Наименование"", ""Пиво""), Стр(""Код"", 12, ""Артикул"", 177));

Присваивает пиву код 12 и артикул 177. 

В качестве дополнительного продвижения можно в структуре поиска и заполнения вводить функции поиска. Т.е. если значением реквизита поиска является структура, это означает что поиск или заполнение нужно делать более специфичным, согласно параметрам этой структуры, например искать на сравнение больше-меньше или устанавливать только те реквизиты, которые не заполнены. Примеры: 


Объект.НайтиПоРеквизитам(""Справочники"", ""Номенклатура"", Стр(""Код"", Стр(""<"", 123)), истина);
- возвращает все элементы, код которых меньше 123. 


Объект.НайтиПоРеквизитам(""Справочники"", ""Номенклатура"", Стр(""Код"", Стр(""Условие"", ""Элемент.Код<123 И Элемент.Код>10"")), истина);
- возвращает все элементы, удовлетворяющим условию, написанному на языке запросов. 


Объект.ЗаполнитьПоРеквизитам(Товар, Стр(""Артикул"", Стр(""ТолькоПустые"", ""123-АК""), Стр(""Код"", Стр(""ТолькоПустые"", ""123"")));
- устанавливает товару код 123 и артикул 123-АК только в том случае, если эти реквизиты не заполнены. 

У меня в конфигурации эти функции написаны, но еще не выделены в отдельный код. Попробую это сделать и опубликовать здесь. В любом случае использовать такие функции удобнее, чем запросы, но при их выполнении в цикле эффективность меньше, чем у соответствующего запроса, т.к. идет обращение к метаданным и тратится время на конструирование и компиляцию запроса. 

Также при написании таких функций нужно обратить внимание на сравнение строк неограниченной длины при поиске. Например, частый случай на практике - поиск по комментарию. В 1С 80 в запросах нельзя сравнивать строки неограниченной длины на равенство, поэтому нужно использовать оператор Выразить."}
}
}
},
{1,
{"ТВКВ",1,0,"",""},
{0,
{"Повторная попытка проведения при блокировках",0,0,"","Суть - пытаемся записать объект. Если объект не записался, смотрим в чем дело - если это ошибка SQL, ждем некоторое время и пробуем записать опять. 
Думаю, можно еще доработать, чтобы время ожидания увеличивалось на каждом проходе. 

Параметры: 
* Задержка - задержка в секундах 
* Протяжек - 0, если пытаться записывать бесконечно, или количество протяжек. 


//Задержка на Секунд секунд
Функция п_Задержка(Секунд) Экспорт
    Перем Начало, Конец;
    Начало=ТекущаяДата();
    Конец=Начало+Секунд;
    Пока ТекущаяДата()<=Конец Цикл
        ОбработкаПрерыванияПользователя();
    КонецЦикла;
КонецФункции

Функция п_ЗаписатьОбъектSQL(Объект, РежимЗаписи=Неопределено, РежимПроведения=Неопределено, Задержка=10, Протяжек=0)
    Перем Протяжка, ОписаниеОшибки;
    Протяжка=1;
    Пока (истина) Цикл
        Попытка
            Если РежимЗаписи=Неопределено И РежимПроведения=Неопределено Тогда
                Объект.Записать();
            ИначеЕсли РежимПроведения=Неопределено Тогда
                Объект.Записать(РежимЗаписи);
            Иначе
                Объект.Записать(РежимЗаписи, РежимПроведения);
            КонецЕсли;
            Возврат Истина;
        Исключение
            ОписаниеОшибки=ОписаниеОшибки();
            ОшибкаПрефикс=""Microsoft OLE DB Provider for SQL Server:"";
            Если Найти(ОписаниеОшибки,ОшибкаПрефикс)=0 Тогда
                Сообщить(ОписаниеОшибки);
                Возврат ложь;
            Иначе
                п_Задержка(Задержка);  //Задержимся и продолжим запись...
                Если Протяжек<>0 И Протяжка>=Протяжек Тогда
                    Сообщить(""Запись объекта при блокировках SQL не удалась (""+Протяжка+"") :""+Объект+"" ""+СтрЗаменить(ОписаниеОшибки, ОшибкаПрефикс,""""));
                    Возврат ложь;
                КонецЕсли;
                
                Протяжка=Протяжка+1;
                Состояние(Лев(""Блокировки SQL (""+Протяжка+"") :""+Объект+"" ""+СтрЗаменить(ОписаниеОшибки, ОшибкаПрефикс,""""),180)); //Состояние обрезается, чтоб помещаться на экран
            КонецЕсли;
        КонецПопытки;
    КонецЦикла;
КонецФункции
"}
}
},
{6,
{"Прочее",1,0,"",""},
{0,
{"ТипизированиеПеременной",0,0,"шбТ","#Если НЕ (Клиент Или Сервер Или ВнешнееСоединение) Тогда
	<?> = <?>;
#КонецЕсли"}
},
{0,
{"Область",0,0,"шОбл","#Область <?""Имя области (без пробелов)"">

<?>

#КонецОбласти
"}
},
{0,
{"РазделыМодуляФормы",0,0,"шбРазделы","// { ----------------------------------------------- предопределенные
// }

// { ----------------------------------------------- команды
// }

// { ----------------------------------------------- обработка событий элементов формы
// }

// { ----------------------------------------------- служебные
// }
"}
},
{0,
{"АвторскиеКомментарии_Изменен",0,0,"//*","//* antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">
// ----- заменено на:
<?>
/// antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">"}
},
{0,
{"АвторскиеКомментарии_Добавлен",0,0,"//+","//+ antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">
<?>
/// antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">"}
},
{0,
{"АвторскиеКомментарии_Удален",0,0,"//-","//- antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">
/// antowski@gmail.com <?"""", ДатаВремя, ""ДЛФ=DT"">"}
}
}
}
}